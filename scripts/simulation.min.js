let options = {

  // run simulation until N children are adopted
  adopted: 100,

  // how fast should time pass
  applicantsPerDay: 4,

  // same odds of children being created with any age
  equalAgeDistribution: false,

  // if disabled, every kid is born on the 1st of January
  randomBirthdays: true,

};

(function() {

let app = {

  dependencies : [
    {
      type: 'json',
      name: 'adoption',
      url : 'data/adoption.json'
    }
  ],

  responses : 0,

  data : {},

  get : {

    json : function( url, name ) {

      fetch( url )
      .then( ( response ) => response.json() )
      .then( function( data ) {

        app.data[ name ] = data

        app.responses++

        if ( app.dependencies.length == app.responses )
          app.initialize()

      } )

    },

  },

  chance : function( object ) {

    let chances = []

    for ( let key in object ) {

      if ( key !== 'details' ) {

        chance = {
          "property" : key,
          "percentage" : object[ key ]
        }

        chances.push( chance )

      }

    }

    chances.sort( function( a, b ) {
      return parseFloat( b.percentage ) - parseFloat( a.percentage )
    } )

    let random = Math.random()
    let increment = 0

    for ( let chance of chances ) {

      if ( random <= ( increment + chance.percentage ) )
        return chance.property

      else
        increment += chance.percentage

    }

    return chances[0].property

  },

  simulation : {

    children : [],

    applicants : 0,

    applicantsPerDay : options.applicantsPerDay,

    counter : {

      adopted: [],
      admitted: [],
      families: [],
      applicantsList : [],
      expelled: [],
      applicants: 0,
      previousDays: 0,
      days: 0
    },

    child : function( amount ) {

      let children = app.simulation.children
      let data = app.data.adoption.children
      let total = data.total

      if ( typeof amount === 'number' )
        total = amount

      for ( let i = 0; i < total; i++ ) {

        let child = {

          "race"       : app.chance( data.race       ),
          "siblings"   : app.chance( data.siblings   ),
          "gender"     : app.chance( data.gender     ),
          "age"        : app.chance( data.age        ),
          "days"       : Math.floor( Math.random() * 365 ) + 1,

          "mental"     : app.chance( data.mental ),
          "physical"   : app.chance( data.physical ),

        }

        if ( options.randomBirthdays )
          child.days = 1

        child.status = 'admitted'
        child.admission = child.age


        if ( child.mental === 'true' || child.physical === 'true' )
          child.disability = 'true'
        else
          child.disability = 'false'

        if ( typeof amount === 'number' )
          child.status = 'admitted'

        app.simulation.children.push( child )
        app.simulation.counter.admitted.push( child )

      }

    },

    applicant : function() {

      let data = app.data.adoption.applicants.accepts

      let accepted = []

      let raceGroup = app.chance( data.race )

      if ( raceGroup === 'all' ) {

        for ( let possibility in data.race.details.some ) {
          accepted.push( possibility )
        }

      } else if ( raceGroup === 'some' ) {

        for ( let possibility in data.race.details.some ) {

          if ( app.chance( data.race.details.some[ possibility ] ) === 'true' )
            accepted.push( possibility )

        }

      } else {

        accepted.push( app.chance( data.race.details.only ) )

      }

      let applicant = {

        "race"       : accepted,
        "siblings"   : app.chance( data.siblings   ),
        "gender"     : app.chance( data.gender     ),
        "age"        : app.chance( data.age        ),

        "mental"     : app.chance( data.mental     ),
        "physical"   : app.chance( data.physical   )

      }

      if ( applicant.mental === 'true' || applicant.physical === 'true' )
        applicant.disability = 'true'

      else
        applicant.disability = 'false'

      app.simulation.counter.applicantsList.push( applicant )

      return applicant

    },

    match : function( applicant, child ) {

      if ( parseInt( applicant.age ) > parseInt( child.age ) ) {

        if ( applicant.siblings === 'true' || ( applicant.siblings === 'false' && child.siblings === 'false' ) ) {

          if (

            ( applicant.mental   === 'true' || ( applicant.mental === 'false'   && child.mental   === 'false' ) ) &&
            ( applicant.physical === 'true' || ( applicant.physical === 'false' && child.physical === 'false' ) )

          ) {

            if ( applicant.gender === 'all' || applicant.gender === child.gender ) {

              if ( applicant.race.includes( child.race ) ) {

                return true

              }

            }

          }

        }

      }

    },

    simulate : function() {

      let vacancies = 0

      // remove adopted and expelled

      for ( let i = app.simulation.children.length - 1; i >= 0; --i ) {

        let child = app.simulation.children[ i ]

        if ( child.status == 'adopted' || child.status == 'expelled' ) {

          app.simulation.children.splice( i, 1 )
          vacancies++

        }

      }


      // generate new kids

      app.simulation.child( vacancies )


      // create new applicant

      let applicant = app.simulation.applicant()


      // check if children were adopted

      let children = app.simulation.children

      for ( let i = 0; i < children.length; i++ ) {

        let child = children[ i ]

        if ( app.simulation.match( applicant, child ) ) {

          app.simulation.adopt( child, applicant )
          break

        }

      }

      // check if children were expelled

      for ( let i = 0; i < children.length; i++ ) {

        let child = children[ i ]

        if ( parseInt( child.age ) > 18 ) {

          app.simulation.expel( child )
          break

        }

      }


      // update days

      app.simulation.update.hours()


    },

    calculate : function( amount ) {

      // calculating

      while ( app.simulation.counter.adopted.length < amount ) {

        app.simulation.simulate()
        app.simulation.counter.applicants++

      }

      let pre = document.createElement( 'pre' )

      // TEMP:
      // delete app.simulation.counter.adopted
      // delete app.simulation.counter.expelled

      let output = app.simulation.counter
      output = JSON.stringify( output, null, 2 )

      pre.innerHTML = output
      document.body.appendChild( pre )

    },

    update : {

      hours : function() {

        let applicants = app.simulation.counter.applicants

        let days = Math.floor( applicants / app.simulation.applicantsPerDay )

        app.simulation.counter.days = days

        if ( app.simulation.counter.previousDays !== days ) {

          app.simulation.update.age()

          app.simulation.counter.previousDays = days

        }

      },

      age : function() {

        let children = app.simulation.children

        for ( let child of children ) {

          child.days++

          if ( child.days > 365 ) {

            child.age++
            child.days = 1

          }

        }

      }

    },

    clear : function( previously ) {

      previously.adopted.forEach( e => e.remove() )
      previously.expelled.forEach( e => e.remove() )

    },

    adopt : function( child, applicant ) {

      app.simulation.counter.adopted.push( child )
      child.status = 'adopted'

      let family = {
        applicant: applicant,
        child: child
      }

      app.simulation.counter.families.push( family )

    },

    expel : function( child ) {

      app.simulation.counter.expelled.push( child )
      child.status = 'expelled'

    }

  },

  load : function() {

    for ( let dependency of this.dependencies ) {

      if ( dependency.type == 'json' )
        app.get.json( dependency.url, dependency.name )

    }

  },

  initialize : function() {

    if ( options.equalAgeDistribution ) {

      app.data.adoption.children.age = {
        "1":  0.0555555555556,
        "2":  0.0555555555556,
        "3":  0.0555555555556,
        "4":  0.0555555555556,
        "5":  0.0555555555556,
        "6":  0.0555555555556,
        "7":  0.0555555555556,
        "8":  0.0555555555556,
        "9":  0.0555555555556,
        "10": 0.0555555555556,
        "11": 0.0555555555556,
        "12": 0.0555555555556,
        "13": 0.0555555555556,
        "14": 0.0555555555556,
        "15": 0.0555555555556,
        "16": 0.0555555555556,
        "17": 0.0555555555556,
        "18": 0.0555555555556
      }

    }

    app.simulation.child()

    app.simulation.calculate( options.adopted )

  }

}

app.load()

})()
